@{
    ViewData["Title"] = "Measurement Grid";
}

<h2>Measurement Grid</h2>

<div>
    <a href="@Url.Content("~/Home/Index")">
        <button>Go Home</button>
    </a>
</div>


<div id="grid-container"></div>



<script>
    // Fetch data from the API
    async function fetchGridData() {
        try {
            const response = await fetch('/api/Data/Grid');
            if (!response.ok) {
                throw new Error('Failed to fetch grid data.');
            }
            const data = await response.json();

            console.log('Fetched Data:', data);


            renderGrid(data);
        } catch (error) {
            console.error('Error fetching grid data:', error);
            document.getElementById('grid-container').innerText = 'Error loading grid.';
        }
    }

    // Render the grid as a table
    function renderGrid(data) {
        const gridContainer = document.getElementById('grid-container');
        const yKeys = Object.keys(data).map(Number).sort((a, b) => a - b); // Sorted Y-axis keys
        const allXValues = new Set();

        // Collect all X values
        yKeys.forEach(y => data[y].forEach(m => allXValues.add(m.x)));
        const xKeys = Array.from(allXValues).sort((a, b) => a - b); // Sorted X-axis values

        // Collect all Measurement values
        // yKeys.forEach(y => data[y].forEach(m => allXValues.add(m.Matavimas)));
        // const mKeys = Array.from(allXValues).sort((a, b) => a - b); Sorted X-axis values

        // Build table
    let tableHtml = '<table border="1" style="border-collapse: collapse; text-align: center;">';

    // Header Row: Top X-axis labels
    tableHtml += '<thead><tr><th></th>'; // Empty top-left corner
    xKeys.forEach(x => {
        tableHtml += `<th>${x}</th>`;
    });
    tableHtml += '</tr></thead><tbody>';

    // Build table rows
    yKeys.forEach(y => {
        tableHtml += `<tr><th>${y}</th>`; // Left Y-axis label

        xKeys.forEach(x => {
            // Find the data point for the current X and Y
            const point = data[y].find(m => m.x === x);
            const cellValue = point ? 1 : 0;
            const matavimas = point ? `m: ${point.matavimas}` : ''; // Measurement if exists

            // Determine cell color based on value
            const cellColor = cellValue === 1 ? 'green' : 'red';

            // Build the table cell
            tableHtml += `
                <td style="background-color: ${cellColor}; font-weight: bold; color: white;">
                    ${cellValue}<br>
                    <span style="font-size: 10px; color: black;">${matavimas}</span>
                </td>`;
        });

        tableHtml += '</tr>';
    });

    tableHtml += '</tbody></table>';
    gridContainer.innerHTML = tableHtml;
    }

    // Load the grid on page load
    fetchGridData();
</script>
